#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
from collections import namedtuple
import sys


def _print(args, text, **kwargs):
    if not args.quiet:
        print(text, **kwargs)


class Author(namedtuple("Author", ["name", "url"])):
    @property
    def is_me(self):
        return self.name == "Angelos Katharopoulos"

    @property
    def first_name(self):
        return self.name.split(" ")[0]

    @property
    def last_name(self):
        return self.name.split(" ")[1]

    @property
    def initial(self):
        return self.first_name[0]


class Paper(namedtuple("Paper", [
        "title",
        "url",
        "image",
        "authors",
        "conference",
        "year",
        "special",
        "links"
    ])):
    pass


class Conference(namedtuple("Conference", ["name", "short_name"])):
    pass


class Link(namedtuple("Link", ["name", "url", "html", "text"])):
    pass


def author_list(authors, *names):
    return [authors[n] for n in names]


authors = {
    "despi": Author("Despoina Paschalidou", "https://paschalidoud.github.io/"),
    "angelos": Author("Angelos Katharopoulos", ""),
    "diou": Author("Christos Diou", "https://mug.ee.auth.gr/people/christos-diou/"),
    "delo": Author("Anastasios Delopoulos", "https://mug.ee.auth.gr/people/anastasios-delopoulos/"),
    "frankie": Author("Fran√ßois Fleuret", "https://fleuret.org/francois"),
    "apoorv": Author("Apoorv Vyas", "https://idiap.ch/~avyas"),
    "nikos": Author("Nikolaos Pappas", "https://nik0spapp.github.io/"),
    "ageiger": Author("Andreas Geiger", "http://www.cvlibs.net/"),
    "sfidler": Author("Sanja Fidler", "https://www.cs.utoronto.ca/~fidler/")
}

conferences = {
    "preprint": Conference("", "Preprint"),
    "cvpr": Conference("Computer Vision and Pattern Recognition", "CVPR"),
    "neurips": Conference("Neural Information Processing Systems", "NeurIPS"),
    "icml": Conference("International Conference on Machine Learning", "ICML"),
    "eusipco": Conference("European Signal Processing Conference", "EUSIPCO"),
    "acmmm": Conference("ACM Multimedia Conference", "ACMM")
}

publications = [
    Paper(
        "Neural Parts: Learning Expressive 3D Shape Abstractions with Invertible Neural Networks",
        "https://paschalidoud.github.io/neural_parts",
        "imgs/teasers/neural_parts.png",
        author_list(authors, "despi", "angelos", "ageiger", "sfidler"),
        conferences["cvpr"],
        2021,
        None,
        [
            Link("Abstract", None,
                 ("Impressive progress in 3D shape extraction led to "
                  "representations that can capture object geometries with high "),
                 None),
            Link("Paper", "https://arxiv.org/pdf/2103.10429", None, None),
            Link("Explore", "https://paschalidoud.github.io/neural_parts", None, None),
            Link("Video", "https://www.youtube.com/watch?v=6WK3B0IZJsw", None, None),
            Link("Poster", "https://paschalidoud.github.io/data/Paschalidou2021CVPR_poster.pdf", None, None),
            Link("Code", "https://github.com/paschalidoud/neural_parts", None, None),
            Link("Bibtex", None, None,
                 ("@inproceedings{paschalidou2021nps,\n"
                  "    title={Neural Parts: Learning Expressive 3D Shape "
                  "Abstractions with Invertible Neural Networks},\n"
                  "    author={Paschalidou, D. and Katharopoulos, A. and "
                  "Geiger, A. and Fidler, S.},\n"
                  "    booktitle={{Proceedings IEEE Conf. on Computer Vision "
                  "and Pattern Recognition (CVPR)}},\n"
                  "    year={2021},\n"
                  "    url={https://arxiv.org/pdf/2103.10429}\n"
                  "}"))
        ]
    ),

]


def build_publications_list(publications):
    def image(paper):
        if paper.image is not None:
            return '<img src="{}" alt="{}" />'.format(
                paper.image, paper.title
            )
        else:
            return '&nbsp;'

    def title(paper):
        return '<a href="{}">{}</a>'.format(paper.url, paper.title)

    def authors(paper):
        def author(author):
            if author.is_me:
                return '<strong class="author">{}. {}</strong>'.format(
                    author.initial, author.last_name
                )
            else:
                return '<a href="{}" class="author">{}. {}</a>'.format(
                    author.url, author.initial, author.last_name
                )
        return "".join(author(a) for a in paper.authors)

    def conference(paper):
        cf = '{}, {}'.format(paper.conference.short_name, paper.year)
        if paper.special is not None:
            cf = cf + '<span class="special">   ({})</span>'.format(paper.special)
        return cf

    def links(paper):
        def links_list(paper):
            def link(i, link):
                if link.url is not None:
                    # return '<a href="{}">{}</a>'.format(link.url, link.name)
                    return '<a href="{}" data-type="{}">{}</a>'.format(link.url, link.name, link.name)
                else:
                    return '<a href="#" data-type="{}" data-index="{}">{}</a>'.format(link.name, i, link.name)
            return "".join(
                link(i, l) for i, l in enumerate(paper.links)
            )

        def links_content(paper):
            def content(i, link):
                if link.url is not None:
                    return ""
                return '<div class="link-content" data-index="{}">{}</div>'.format(
                    i, link.html if link.html is not None
                       else '<pre>' + link.text + "</pre>"
                )
            return "".join(content(i, link) for i, link in enumerate(paper.links))
        return links_list(paper) + links_content(paper)

    def paper(p):
        return ('<div class="paper">'
                    '<div class="image">{}</div>'
                    '<div class="content">'
                        '<div class="paper-title">{}</div>'
                        '<div class="authors">{}</div>'
                        '<div class="conference">{}</div>'
                        '<div class="links">{}</div>'
                    '</div>'
                    '<div class="clear"></div>'
                '</div>').format(
                    image(p),
                    title(p),
                    authors(p),
                    conference(p),
                    links(p)
                )

    return "".join(paper(p) for p in publications)


def main(argv):
    parser = argparse.ArgumentParser(
        description="Create a publication list and insert in into an html file"
    )
    parser.add_argument(
        "file",
        help="The html file to insert the publications to"
    )

    parser.add_argument(
        "--safe", "-s",
        action="store_true",
        help="Do not overwrite the file but create one with suffix .new"
    )
    parser.add_argument(
        "--quiet", "-q",
        action="store_true",
        help="Do not output anything to stdout/stderr"
    )

    args = parser.parse_args(argv)

    # Read the file
    with open(args.file) as f:
        html = f.read()

    # Find the fence comments
    start_text = "<!-- start publication list -->"
    end_text = "<!-- end publication list -->"
    start = html.find(start_text)
    end = html.find(end_text, start)
    if end < start or start < 0:
        _print(args, "Could not find the fence comments", file=sys.stderr)
        sys.exit(1)

    # Build the publication list in html
    replacement = build_publications_list(publications)

    # Update the html and save it
    html = html[:start+len(start_text)] + replacement + html[end:]

    # If safe is set do not overwrite the input file
    if args.safe:
        with open(args.file + ".new", "w") as f:
            f.write(html)
    else:
        with open(args.file, "w") as f:
            f.write(html)


if __name__ == "__main__":
    main(None)
